-- Notification System
local function sendNotification()
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Goto Gifts", 
        Text = "Make SURE YOU ARE ON THE GIFTS", 
        Duration = 5
    })
end
sendNotification()

-- Remote Setup (if needed)
local function rename(remotename, hashedremote)
    hashedremote.Name = remotename
end

local AC_MODULE = game:GetService("ReplicatedStorage").ClientModules.Core.RouterClient.RouterClient
local initFunction = require(AC_MODULE).init
local upvalueTable = debug.getupvalue(initFunction, 7) or {}

if type(upvalueTable) == "table" then
    for k,v in pairs(upvalueTable) do
        rename(k,v)
    end
end

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

-- Player Setup
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Status UI
local statusUI = Instance.new("TextLabel")
statusUI.Size = UDim2.new(0, 250, 0, 40)
statusUI.Position = UDim2.new(0.5, -125, 0, 10)
statusUI.AnchorPoint = Vector2.new(0.5, 0)
statusUI.BackgroundTransparency = 0.7
statusUI.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
statusUI.TextColor3 = Color3.fromRGB(255, 105, 180)
statusUI.Text = "ðŸŒ¸ Initializing... ðŸŒ¸"
statusUI.Font = Enum.Font.GothamBold
statusUI.TextSize = 14
statusUI.Parent = player:WaitForChild("PlayerGui")

-- Optimized Functions
local function activateMinigame()
    -- Activate furniture
    local args = {
        [1] = "f-49",
        [2] = "Seat3",
        [3] = {
            ["cframe"] = CFrame.new(92.862, 32.845, -1341.469) * CFrame.Angles(0, -0.734, 0)
        },
        [4] = character
    }
    
    local success = pcall(function()
        ReplicatedStorage.API["HousingAPI/ActivateInteriorFurniture"]:InvokeServer(unpack(args))
    end)
    
    if not success then
        statusUI.Text = "ðŸŒ¸ Failed to Activate ðŸŒ¸"
        return false
    end
    
    -- Teleport to circle
    task.wait(0.5)
    local circle = workspace.Interiors["MainMap!Default"].Shop.Visual.PagodaCurved.JoinCircleWood.Model.Model.Circle
    if circle then
        humanoidRootPart.CFrame = circle.CFrame * CFrame.new(0, 3, 0)
        return true
    end
    return false
end

local function collectRings()
    local success, ringFolder = pcall(function()
        return workspace.Interiors.BlossomShakedownInterior.RingPickups
    end)
    
    if not success or not ringFolder then return false end
    
    local collected = 0
    local rings = {}
    
    -- Cache all valid rings first
    for _, ring in ipairs(ringFolder:GetChildren()) do
        if ring:IsA("Model") and ring.PrimaryPart then
            table.insert(rings, ring)
        end
    end
    
    -- Teleport to each ring
    for _, ring in ipairs(rings) do
        humanoidRootPart.CFrame = ring.PrimaryPart.CFrame + Vector3.new(0, 3, 0)
        collected = collected + 1
        statusUI.Text = string.format("ðŸŒ¸ Collecting (%d/%d) ðŸŒ¸", collected, #rings)
        task.wait(0.10) -- Optimal speed
    end
    
    return #rings > 0
end

-- Main Farm Loop
local function autoFarmLoop()
    while true do
        -- Try collecting rings first
        local collected = collectRings()
        
        -- If no rings collected, start minigame
        if not collected then
            if not activateMinigame() then
                statusUI.Text = "ðŸŒ¸ Error - Retrying... ðŸŒ¸"
                task.wait(3)
            else
                task.wait(3) -- Wait for minigame to load
            end
        end
        
        task.wait()
    end
end

-- Character Handling
player.CharacterAdded:Connect(function(newChar)
    character = newChar
    humanoidRootPart = newChar:WaitForChild("HumanoidRootPart")
    statusUI.Text = "ðŸŒ¸ Ready ðŸŒ¸"
    task.wait(1) -- Brief delay after respawn
end)

-- Start the farm
task.spawn(function()
    while true do
        local success, err = pcall(autoFarmLoop)
        if not success then
            statusUI.Text = "ðŸŒ¸ Error: "..tostring(err).." ðŸŒ¸"
            task.wait(3)
        end
    end
end)
